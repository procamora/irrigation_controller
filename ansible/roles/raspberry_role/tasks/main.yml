---
# tasks file for common_role

# todo ok
- name: Main | pre_tasks
  include_tasks: pre_tasks.yml

## todo ok
- name: Main | raspi_config
  include_tasks: raspi_config.yml

## todo ok
- name: Main | reboot
  include_tasks: reboot.yml

# todo ok
- name: Main | Install packages
  include_tasks: packages.yml

- name: Main | reboot
  include_tasks: reboot.yml

#- name: Main | Install Filebeat
#  include: filebeat.yml

#- name: Main | Configure firewalld
#  include: firewalld.yml
#  when:
#    - ansible_os_family == 'RedHat'

- name: Main | user
  include_tasks: user.yml

# todo ok
#- name: Main | Install motd
#  include_tasks: motd.yml

#- name: Main | Install custom_workspace
#  include: zsh.yml


#- name: Copy Complete directory
#  copy:
#    src: "{{ playbook_dir }}/../"
#    dest: "/home/{{ procamora_user }}/test/"
#    remote_src: no
#    directory_mode: yes

# https://docs.ansible.com/ansible/latest/collections/community/general/archive_module.html
- name: Create a tar.gz archive of a single file.
  community.general.archive:
    path: "{{ playbook_dir }}/../"
    dest: /tmp/irrigation.tar.gz
    format: gz
    force_archive: true
  delegate_to: localhost

- name: Create directory irrigation_controller
  file:
    path: "/home/{{ procamora_user }}/irrigation_controller/"
    state: directory


- name: Extract foo.tgz into /var/lib/foo
  ansible.builtin.unarchive:
    src: /tmp/irrigation.tar.gz
    dest: "/home/{{ procamora_user }}/irrigation_controller/"
    remote_src: no
    owner: "{{ procamora_user }}"

- name: Detete /tmp/irrigation.tar.gz
  file:
    path: /tmp/irrigation.tar.gz
    state: absent
  delegate_to: localhost

- name: Install specified python requirements
  ansible.builtin.pip:
    requirements: "/home/{{ procamora_user }}/irrigation_controller/requirements.txt"


- name: Post Tasks | Reboot if change main user
  reboot:
    msg: "Reboot initiated by Ansible for kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: _create_user.changed
